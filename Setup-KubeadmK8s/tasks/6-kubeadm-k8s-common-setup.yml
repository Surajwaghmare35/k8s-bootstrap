---
- name: Set static hostname
  hostname: name={{ inventory_hostname }}

- name: Add or update /etc/hosts file
  lineinfile:
    path: /etc/hosts
    line: "{{ ansible_default_ipv4.address }} {{ ansible_host }} {{ ansible_hostname }}"
    state: present

- name: check swap status & diable it
  shell: "{{ item }}"
  loop: [free -h, swapon -s, swapoff -a]

- name: Comment /swap.img and /swapfile lines using sed
  shell: sed -i '/\/swap.img\|\/swapfile/ s/^/# /' /etc/fstab

# Uncomment /swap.img and /swapfile lines using sed
# sed -i '/\/swap.img\|\/swapfile/ s/^# //' /etc/fstab

# - name: Distable apparmor.service
#   systemd: name=apparmor state=stopped daemon_reload=true

- include_tasks: 7-k8s-iptables.yml

- name: Add k8s GPG apt Key in /etc/apt/trusted.gpg.d
  apt_key:
    url: "{{ k8s_gpg_apt_key_url }}"
    keyring: /etc/apt/trusted.gpg.d/kubernetes-archive-keyring.gpg
    state: present

- name: Add k8s Repository in /etc/apt/sources.list.d
  apt_repository: repo={{ k8s_repo_url }} filename=kubernetes update_cache=true state=present

- name: Install kubelet, kubeadm, kubectl
  apt: name="{{ item }}" state=latest force_apt_get=true
  loop: "{{ k8s_pkgs }}"

# - name: Prevent kubelet, kubeadm, kubectl from being upgraded
#   dpkg_selections: name="{{ item }}" selection=hold
#   loop: "{{ k8s_pkgs }}"

# - name: Update k8s_CgroupLog_config in /etc/docker/daemon.json
#   copy: content={{ k8s_CgroupLog_config }} dest=/etc/docker/daemon.json
#   notify: Restart Docker & Containerd

- name: set kubectl, kubeadm 'bash' auto-completion
  lineinfile: path=/home/{{ ansible_user }}/.bashrc line={{ item }}
  loop: [source <(kubectl completion bash), source <(kubeadm completion bash)]

- name: set kubectl, kubeadm 'zsh' auto-completion
  lineinfile: path=/home/{{ ansible_user }}/.zshrc line={{ item }}
  loop: [source <(kubectl completion zsh), source <(kubeadm completion zsh)]

# - name: remove '/etc/containerd/config.toml'
#   file: path=/etc/containerd/config.toml state=absent
#   notify:
#     - Update Unix domain socket Perm!
#     - Restart Docker & Containerd

- name: Update Unix domain socket Perm!
  file: path={{ item }} mode='0666' # state: file
  # loop: "{{ unix_domain_socket  | dict2items }}}"
  loop: ["{{ docker_uds }}", "{{ containerd_uds }}"]

- name: Restart Docker & Containerd
  service: name={{ item }} state=restarted daemon_reload=true
  loop: [docker, containerd]
